import os
import logging
import requests
import pytz
import uuid
from datetime import time, datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    PreCheckoutQueryHandler, MessageHandler, ContextTypes, filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
DASHSCOPE_API_KEY = os.getenv("DASHSCOPE_API_KEY")
MODEL = "qwen-turbo"
MAX_FREE_TRIALS = 2

if not BOT_TOKEN or not DASHSCOPE_API_KEY:
    raise ValueError("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç BOT_TOKEN –∏–ª–∏ DASHSCOPE_API_KEY –≤ Variables –Ω–∞ Railway!")

# === –•–†–ê–ù–ò–õ–ò–©–ê ===
free_trials_count = {}
purchases = {}
referrals = {}
user_ref_by = {}
user_channels = {}

def get_ref_code(user_id: int) -> str:
    if user_id not in referrals:
        referrals[user_id] = str(uuid.uuid4())[:8]
    return referrals[user_id]

# === –ö–ê–ù–ê–õ–´ ===
CHANNEL_DISPLAY_NAMES = {
    "AI_Automation_Hub": "@AI_Automation_Hub",
    "Earn_InTelegram": "@Earn_InTelegram",
    "CryptoAI_Guide": "@CryptoAI_Guide",
    "SmartHabits_AI": "@SmartHabits_AI",
    "FinAI_Guide": "@FinAI_Guide",
    "HealthAI_Tips": "@HealthAI_Tips",
    "GrowthAI_Hacks": "@GrowthAI_Hacks",
    "LearnAI_Fast": "@LearnAI_Fast",
    "MindAI_Daily": "@MindAI_Daily",
    "TechAI_Now": "@TechAI_Now"
}

def get_channel_key(display_name: str) -> str:
    reverse_map = {v: k for k, v in CHANNEL_DISPLAY_NAMES.items()}
    return reverse_map.get(display_name, "AI_Automation_Hub")

# === –ö–û–ù–¢–ï–ù–¢ ===
TRIAL_OFFERS = {
    "AI_Automation_Hub": "1. Qwen\n2. Notion AI\n3. Zapier + –ò–ò\n4. Trello + Butler\n5. Canva Magic Studio\n6. Otter.ai\n7. GrammarlyGO\n8. Tome.app\n9. Bardeen\n10. Make.com\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏.",
    "Earn_InTelegram": "1. –°–æ–∑–¥–∞—Ç—å –±–æ—Ç–∞\n2. –ü–æ–¥–∫–ª—é—á–∏—Ç—å Stars\n3. –°–¥–µ–ª–∞—Ç—å —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä\n4. –ù–∞–ø–∏—Å–∞—Ç—å –ø–æ—Å—Ç\n5. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥\n6. –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑—ã–≤ –∫ —à–µ—Ä—É\n7. –ü–æ–≤—Ç–æ—Ä—è—Ç—å\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å —à–∞–±–ª–æ–Ω–∞–º–∏.",
    "CryptoAI_Guide": "1. BTC\n2. ETH\n3. SOL\n4. TON\n5. RNDR\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å –∞–Ω–∞–ª–∏–∑–æ–º.",
    "SmartHabits_AI": "1. –£—Ç—Ä–æ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n2. 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏\n3. –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π\n4. –í–µ—á–µ—Ä–Ω–∏–π —Ä–µ–≤—å—é\n5. –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å\n6. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n7. –û—Ç–¥—ã—Ö –±–µ–∑ –≤–∏–Ω—ã\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å —Ç–∞–π–º–∏–Ω–≥–æ–º.",
    "FinAI_Guide": "1. –î–æ—Ö–æ–¥—ã\n2. –†–∞—Å—Ö–æ–¥—ã\n3. –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è\n4. –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏\n5. –ó–∞—â–∏—Ç–∞\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å —Ç–∞–±–ª–∏—Ü–µ–π.",
    "HealthAI_Tips": "–ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ + —è–≥–æ–¥—ã\n–û–±–µ–¥: –±–µ–ª–æ–∫ + –æ–≤–æ—â–∏\n–£–∂–∏–Ω: –ª—ë–≥–∫–∏–π\n–ü–µ—Ä–µ–∫—É—Å—ã: –π–æ–≥—É—Ä—Ç, —Ñ—Ä—É–∫—Ç—ã\n–í–æ–¥–∞: 30 –º–ª/–∫–≥\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å –ë–ñ–£.",
    "GrowthAI_Hacks": "1. ¬´–°–æ—Ö—Ä–∞–Ω–∏¬ª\n2. ¬´3 –æ—à–∏–±–∫–∏¬ª\n3. ¬´–ö–∞–∫ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª¬ª\n4. ¬´–ß–µ–∫-–ª–∏—Å—Ç¬ª\n5. ¬´–¢–û–ü-5¬ª\n6. ¬´–°—Ä–∞–≤–Ω–µ–Ω–∏–µ¬ª\n7. ¬´–°–µ–∫—Ä–µ—Ç¬ª\n8. ¬´–í–æ–ø—Ä–æ—Å¬ª\n9. ¬´–û–ø—ã—Ç¬ª\n10. ¬´–®–∞–≥ –∑–∞ —à–∞–≥–æ–º¬ª\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å —ç–º–æ–¥–∑–∏.",
    "LearnAI_Fast": "1. –ë–∞–∑—ã\n2. –®–∞–±–ª–æ–Ω—ã\n3. –ö–∞–ª–µ–Ω–¥–∞—Ä—å\n4. –ö–Ω–æ–ø–∫–∏\n5. Telegram\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å Notion.",
    "MindAI_Daily": "1. –î—ã—Ö–∞–Ω–∏–µ 4-7-8\n2. –ó–∞–∑–µ–º–ª–µ–Ω–∏–µ\n3. –ë–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å\n4. –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n5. –ú–µ–¥–∏—Ç–∞—Ü–∏—è\n... –¥–æ 30\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å PDF.",
    "TechAI_Now": "1. iPhone 16 Pro\n2. Galaxy Ring\n3. Vision Pro\n4. DJI Avata 2\n5. Framework Laptop\n6. WH-1000XM6\n7. Kindle Scribe\n8. DJI Mic 2\n9. Anker Charger\n10. MX Master 3S\n\nüíé –ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è ‚Äî —Å –ø—Ä–æ–º–æ–∫–æ–¥–∞–º–∏."
}

DIGITAL_PRODUCTS_49 = {
    "HealthAI_Tips": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è:\n\n- –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ (40–≥) + —è–≥–æ–¥—ã (100–≥) + –º–∏–Ω–¥–∞–ª—å (10–≥)\n  –ë–ñ–£: 320 –∫–∫–∞–ª | –ë: 10–≥ | –ñ: 12–≥ | –£: 45–≥\n- –û–±–µ–¥: –∫—É—Ä–∏—Ü–∞ (150–≥) + –±—Ä–æ–∫–∫–æ–ª–∏ (200–≥) + –∫–∏–Ω–æ–∞ (50–≥)\n  –ë–ñ–£: 450 –∫–∫–∞–ª | –ë: 35–≥ | –ñ: 15–≥ | –£: 40–≥\n- –£–∂–∏–Ω: —Ä—ã–±–∞ (120–≥) + —Å–∞–ª–∞—Ç (150–≥)\n  –ë–ñ–£: 280 –∫–∫–∞–ª | –ë: 25–≥ | –ñ: 10–≥ | –£: 20–≥",
    "Earn_InTelegram": "–ü–æ–¥—Ä–æ–±–Ω—ã–π –≥–∞–π–¥:\n\n–®–∞–≥ 1: –°–æ–∑–¥–∞–π—Ç–µ –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n–®–∞–≥ 2: –í–∫–ª—é—á–∏—Ç–µ Telegram Stars\n–®–∞–≥ 3: –°–æ–∑–¥–∞–π—Ç–µ PDF —Å —á–µ–∫-–ª–∏—Å—Ç–æ–º\n–®–∞–≥ 4: –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ—Å—Ç —Å –ø—Ä–∏–∑—ã–≤–æ–º\n–®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ —á–µ—Ä–µ–∑ Railway\n–®–∞–≥ 6: –î–æ–±–∞–≤—å—Ç–µ ¬´–ü–µ—Ä–µ—à–ª–∏ –¥—Ä—É–≥—É¬ª\n–®–∞–≥ 7: –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ",
}

DIGITAL_PRODUCTS_FULL = {
    "AI_Automation_Hub": "–ß–µ–∫-–ª–∏—Å—Ç: 10 –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤\n\n1. Qwen ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–æ–≤\n...\n10. Make.com ‚Äî —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n\nüìé Notion-—à–∞–±–ª–æ–Ω: https://notion.so/ai-automation-hub",
    "Earn_InTelegram": "–ì–∞–π–¥: $100 —á–µ—Ä–µ–∑ Stars –∑–∞ 7 –¥–Ω–µ–π\n\n–®–∞–≥ 1: –ë–æ—Ç —á–µ—Ä–µ–∑ @BotFather\n...\n–®–∞–≥ 7: –ü–æ–≤—Ç–æ—Ä—è–π—Ç–µ\n\nüì• –í –∫–æ–º–ø–ª–µ–∫—Ç–µ: —à–∞–±–ª–æ–Ω—ã –ø–æ—Å—Ç–æ–≤ + Notion-—Ç—Ä–µ–∫–µ—Ä: https://notion.so/earn-intelegram",
    "HealthAI_Tips": "–ü–û–õ–ù–´–ô –ü–õ–ê–ù –ü–ò–¢–ê–ù–ò–Ø:\n\n‚úÖ –ú–µ–Ω—é —Å –ë–ñ–£\n‚úÖ –°–æ–≤–µ—Ç—ã –ø–æ –∑–∞–º–µ–Ω–µ\n‚úÖ –°–µ–∑–æ–Ω–Ω—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã\n‚úÖ PDF –¥–ª—è –ø–µ—á–∞—Ç–∏\n\nüìé Notion-—à–∞–±–ª–æ–Ω: https://notion.so/health-ai-tips",
}

WEEKLY_GUIDE = {
    "title": "–¢–û–ü-5 –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤",
    "channel_key": "AI_Automation_Hub",
    "price": 29,
    "content": "–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –≥–∞–π–¥ –Ω–µ–¥–µ–ª–∏:\n\n1. Notion AI ‚Äî –∫–æ–Ω—Å–ø–µ–∫—Ç—ã\n2. Otter.ai ‚Äî –∑–∞–ø–∏—Å—å –ª–µ–∫—Ü–∏–π\n3. Qwen ‚Äî —Ä–µ—à–µ–Ω–∏–µ –∑–∞–¥–∞—á\n4. Tome.app ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n5. Bardeen ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —É—á—ë–±—ã\n\n–î–æ—Å—Ç—É–ø–µ–Ω –¥–æ: {end_date}\n\nüìé Notion: https://notion.so/weekly-student-ai"
}
WEEKLY_END = datetime.now(pytz.timezone("Europe/Moscow")) + timedelta(days=7)

logging.basicConfig(level=logging.INFO)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if context.args and context.args[0].startswith("ref"):
        ref_code = context.args[0][3:]
        user_ref_by[user_id] = ref_code
        await update.message.reply_text("üéÅ –í—ã –ø–µ—Ä–µ—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ! –ü–µ—Ä–≤—ã–π –≥–∞–π–¥ ‚Äî —Å–æ —Å–∫–∏–¥–∫–æ–π 10%.")
    await update.message.reply_text("–ù–∞–ø–∏—à–∏—Ç–µ /guide –∏–ª–∏ /profile")

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    free_used = free_trials_count.get(user_id, 0)
    bought = purchases.get(user_id, [])
    ref_code = get_ref_code(user_id)
    ref_link = f"https://t.me/siwec_bot?start=ref{ref_code}"
    text = (
        f"üìä **–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å**\n\n"
        f"–ë–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–π–¥–æ–≤: {free_used}/{MAX_FREE_TRIALS}\n"
        f"–ö—É–ø–ª–µ–Ω–æ –≥–∞–π–¥–æ–≤: {len(bought)}\n\n"
        f"üîó –í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
        f"`{ref_link}`"
    )
    await update.message.reply_text(text, parse_mode="Markdown")

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat = update.effective_chat
    referrer = None
    if chat.type == "private" and update.message.forward_from_chat:
        username = update.message.forward_from_chat.username
        if username:
            referrer = f"@{username}"
    if not referrer:
        keyboard = [[InlineKeyboardButton(name, callback_data=f"sel_{key}")] for key, name in CHANNEL_DISPLAY_NAMES.items()]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
        return
    user_channels[user_id] = referrer
    await send_trial_offer(update, context, referrer)

async def select_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    channel_key = query.data.replace("sel_", "")
    user_channels[query.from_user.id] = f"@{channel_key}"
    await send_trial_offer(query, context, f"@{channel_key}")

async def send_trial_offer(update_or_query, context, channel_display):
    channel_key = get_channel_key(channel_display)
    title = f"–ì–∞–π–¥ –¥–ª—è {channel_display}"
    msg = f"üí¨ –•–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å {title}?"
    keyboard = [
        [
            InlineKeyboardButton("üîò –ë–µ—Å–ø–ª–∞—Ç–Ω–æ", callback_data=f"trial_{channel_key}"),
            InlineKeyboardButton("üíé 49 Stars", callback_data=f"full49_{channel_key}"),
            InlineKeyboardButton("üåü 100 Stars", callback_data=f"full100_{channel_key}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_text(msg, reply_markup=reply_markup)
    else:
        await update_or_query.message.reply_text(msg, reply_markup=reply_markup)

async def handle_trial_choice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    data = query.data
    if data.startswith("trial_"):
        if free_trials_count.get(user_id, 0) >= MAX_FREE_TRIALS:
            channel_key = data.replace("trial_", "")
            await query.message.reply_text(
                "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ 2 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≥–∞–π–¥–∞. –•–æ—Ç–∏—Ç–µ –±–æ–ª—å—à–µ?",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("üíé 49 Stars", callback_data=f"full49_{channel_key}"),
                    InlineKeyboardButton("üåü 100 Stars", callback_data=f"full100_{channel_key}")
                ]])
            )
            return
        channel_key = data.replace("trial_", "")
        outline = TRIAL_OFFERS.get(channel_key, "–û–≥–ª–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        await query.message.reply_text(f"–í–æ—Ç –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ:\n\n{outline}")
        free_trials_count[user_id] = free_trials_count.get(user_id, 0) + 1
    elif data.startswith("full49_"):
        channel_key = data.replace("full49_", "")
        await send_invoice(query, context, channel_key, 49, "–ø–æ–¥—Ä–æ–±–Ω–∞—è")
    elif data.startswith("full100_"):
        channel_key = data.replace("full100_", "")
        await send_invoice(query, context, channel_key, 100, "–ø–æ–ª–Ω–∞—è")

async def send_invoice(query, context, channel_key, price, version):
    display_name = CHANNEL_DISPLAY_NAMES[channel_key]
    description = "–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ." if price == 49 else "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è: —Å–æ–≤–µ—Ç—ã, PDF, Notion."
    title = f"{version} –≤–µ—Ä—Å–∏—è: {display_name}"
    payload = f"product_{channel_key}_{price}"
    prices = [LabeledPrice("–ì–∞–π–¥", price)]
    await context.bot.send_invoice(
        chat_id=query.message.chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token="",
        currency="XTR",
        prices=prices
    )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    payload = update.message.successful_payment.invoice_payload
    parts = payload.split("_")
    if len(parts) < 3:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–≤–∞—Ä–∞.")
        return
    channel_key = parts[1]
    price = int(parts[2])
    if user_id not in purchases:
        purchases[user_id] = []
    purchases[user_id].append(channel_key)
    content = ""
    if price == 29:
        content = WEEKLY_GUIDE["content"].format(end_date=WEEKLY_END.strftime("%d.%m"))
    elif price == 49:
        content = DIGITAL_PRODUCTS_49.get(channel_key, "–ü–æ–¥—Ä–æ–±–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    else:
        content = DIGITAL_PRODUCTS_FULL.get(channel_key, "–ü–æ–ª–Ω–∞—è –≤–µ—Ä—Å–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à –≥–∞–π–¥:\n\n{content}")

# === –ê–í–¢–û–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø ===
async def publish_to_channels(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    channel_key = job_data["channel_key"]
    topic = job_data["topic"]
    channel_username = CHANNEL_DISPLAY_NAMES[channel_key]
    prompt = f"–ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –¥–ª—è Telegram –Ω–∞ —Ç–µ–º—É: {topic}. –§–æ—Ä–º–∞—Ç: –∑–∞–≥–æ–ª–æ–≤–æ–∫, 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤, –ø—Ä–∏–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –Ω–∞–ø–∏—Å–∞—Ç—å /guide. –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π."
    try:
        response = requests.post(
            "https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation",
            headers={"Authorization": f"Bearer {DASHSCOPE_API_KEY}", "Content-Type": "application/json"},
            json={"model": MODEL, "input": {"messages": [{"role": "user", "content": prompt}]}, "parameters": {"result_format": "message"}}
        )
        post = response.json()["output"]["choices"][0]["message"]["content"] if response.status_code == 200 else f"‚ö†Ô∏è –û—à–∏–±–∫–∞ API"
    except Exception as e:
        post = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"
    try:
        await context.bot.send_message(chat_id=channel_username, text=post)
        logging.info(f"‚úÖ –ü–æ—Å—Ç –≤ {channel_username}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {channel_username}: {e}")

async def publish_weekly_guide(context: ContextTypes.DEFAULT_TYPE):
    post = f"üî• **–ì–∞–π–¥ –Ω–µ–¥–µ–ª–∏!**\n\n**{WEEKLY_GUIDE['title']}**\n\n–¢–æ–ª—å–∫–æ –¥–æ {WEEKLY_END.strftime('%d.%m')} ‚Äî **29 Stars** –≤–º–µ—Å—Ç–æ 49!\n\nüëâ –ù–∞–ø–∏—à–∏—Ç–µ /guide"
    for channel in CHANNEL_DISPLAY_NAMES.values():
        try:
            await context.bot.send_message(chat_id=channel, text=post, parse_mode="Markdown")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –≤ {channel}: {e}")

def setup_scheduled_posts(application: Application):
    tz = pytz.timezone("Europe/Moscow")
    topics_map = {
        "AI_Automation_Hub": "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ –ò–ò",
        "Earn_InTelegram": "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram Stars",
        "CryptoAI_Guide": "–∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞",
        "SmartHabits_AI": "–ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "FinAI_Guide": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "HealthAI_Tips": "–∑–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è",
        "GrowthAI_Hacks": "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –ª–∞–π—Ñ—Ö–∞–∫",
        "LearnAI_Fast": "–æ–±—É—á–µ–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç",
        "MindAI_Daily": "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
        "TechAI_Now": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ"
    }
    job_queue = application.job_queue
    for channel_key, topic in topics_map.items():
        data = {"channel_key": channel_key, "topic": topic}
        job_queue.run_daily(publish_to_channels, time(9, 0, tzinfo=tz), data=data)
        job_queue.run_daily(publish_to_channels, time(18, 0, tzinfo=tz), data=data)
    job_queue.run_daily(publish_weekly_guide, time(10, 0, tzinfo=tz), days=(0,))

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("guide", guide))
    app.add_handler(CommandHandler("profile", profile))
    app.add_handler(CallbackQueryHandler(select_channel, pattern=r"^sel_"))
    app.add_handler(CallbackQueryHandler(handle_trial_choice, pattern=r"^(trial_|full49_|full100_)"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))
    setup_scheduled_posts(app)
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    app.run_polling()
