import os
import logging
import requests
import pytz
from datetime import time
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import (
    Application, CommandHandler, CallbackQueryHandler,
    PreCheckoutQueryHandler, MessageHandler, ContextTypes, filters
)

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN")
DASHSCOPE_API_KEY = os.getenv("DASHSCOPE_API_KEY")
MODEL = "qwen-turbo"  # –∏–ª–∏ "qwen-max"

# –¶–∏—Ñ—Ä–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞
DIGITAL_PRODUCTS = {
    "@AI_Automation_Hub": "–ß–µ–∫-–ª–∏—Å—Ç: 10 –ò–ò-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å–∞\n\n1. Qwen ‚Äî –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–æ–≤, –∞–Ω–∞–ª–∏–∑–∞, –∫–æ–¥–∞\n2. Notion AI ‚Äî –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –∏ –∑–∞–¥–∞—á–∏\n3. Zapier + –ò–ò ‚Äî —Å–≤—è–∑–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –±–µ–∑ –∫–æ–¥–∞\n4. Trello + Butler ‚Äî –∞–≤—Ç–æ–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á\n5. Canva Magic Studio ‚Äî –¥–∏–∑–∞–π–Ω –∑–∞ 1 –∫–ª–∏–∫\n6. Otter.ai ‚Äî —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ –≤—Å—Ç—Ä–µ—á\n7. GrammarlyGO ‚Äî —É–º–Ω–æ–µ –ø–∏—Å—å–º–æ\n8. Tome.app ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –æ—Ç –ò–ò\n9. Bardeen ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±—Ä–∞—É–∑–µ—Ä–∞\n10. Make.com ‚Äî —Å–ª–æ–∂–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n\nüí° –°–æ—Ö—Ä–∞–Ω–∏ ‚Äî –≤–Ω–µ–¥—Ä–∏ –∑–∞ –≤—ã—Ö–æ–¥–Ω—ã–µ!",
    "@Earn_InTelegram": "–ì–∞–π–¥: –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å $100 —á–µ—Ä–µ–∑ Telegram Stars –∑–∞ 7 –¥–Ω–µ–π\n\n–®–∞–≥ 1: –°–æ–∑–¥–∞–π –±–æ—Ç–∞ —á–µ—Ä–µ–∑ @BotFather\n–®–∞–≥ 2: –ü–æ–¥–∫–ª—é—á–∏ Telegram Stars (–≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –±–æ—Ç–∞)\n–®–∞–≥ 3: –°–¥–µ–ª–∞–π —Ü–∏—Ñ—Ä–æ–≤–æ–π —Ç–æ–≤–∞—Ä (PDF, —á–µ–∫-–ª–∏—Å—Ç, —à–∞–±–ª–æ–Ω)\n–®–∞–≥ 4: –ù–∞–ø–∏—à–∏ –ø–æ—Å—Ç: ¬´–•–æ—á–µ—à—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é? –ù–∞–ø–∏—à–∏ /guide¬ª\n–®–∞–≥ 5: –ù–∞—Å—Ç—Ä–æ–π –∞–≤—Ç–æ–ø–æ—Å—Ç–∏–Ω–≥ (1 –ø–æ—Å—Ç/–¥–µ–Ω—å)\n–®–∞–≥ 6: –î–æ–±–∞–≤—å –ø—Ä–∏–∑—ã–≤: ¬´–ü–µ—Ä–µ—à–ª–∏ –¥—Ä—É–≥—É ‚Äî –æ–Ω —Å–∫–∞–∂–µ—Ç —Å–ø–∞—Å–∏–±–æ¬ª\n–®–∞–≥ 7: –ü–æ–≤—Ç–æ—Ä—è–π ‚Üí –¥–æ—Ö–æ–¥ —Ä–∞—Å—Ç—ë—Ç —Å–∞–º\n\nüí∞ –ü—Ä–∏–º–µ—Ä: 20 –ø—Ä–æ–¥–∞–∂ –ø–æ 49 Stars = $10/–¥–µ–Ω—å",
    "@CryptoAI_Guide": "–°–∏–≥–Ω–∞–ª—ã + –∞–Ω–∞–ª–∏–∑: –¢–û–ü-5 –∫—Ä–∏–ø—Ç–æ–∞–∫—Ç–∏–≤–æ–≤ –Ω–∞ –Ω–µ–¥–µ–ª—é\n\n1. BTC ‚Äî –∫–æ—Ä—Ä–µ–∫—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞, —Ü–µ–ª—å $72K\n2. ETH ‚Äî —Ä–æ—Å—Ç –ø–æ—Å–ª–µ ETF-–Ω–æ–≤–æ—Å—Ç–µ–π\n3. SOL ‚Äî —Å–∏–ª—å–Ω—ã–π on-chain —Ä–æ—Å—Ç\n4. TON ‚Äî —ç–∫–æ—Å–∏—Å—Ç–µ–º–∞ Telegram = –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–π —Ä–æ—Å—Ç\n5. RNDR ‚Äî –ò–ò + GPU = —Ç—Ä–µ–Ω–¥ 2025\n\n‚ö†Ô∏è –ù–µ –∏–Ω–≤–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ–ª—å—à–µ, —á–µ–º –≥–æ—Ç–æ–≤—ã –ø–æ—Ç–µ—Ä—è—Ç—å. –ê–Ω–∞–ª–∏–∑ –æ—Ç –ò–ò.",
    "@SmartHabits_AI": "7-–¥–Ω–µ–≤–Ω—ã–π —á–µ–ª–ª–µ–Ω–¥–∂ –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏\n\n–î–µ–Ω—å 1: –£—Ç—Ä–æ –±–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (30 –º–∏–Ω)\n–î–µ–Ω—å 2: 3 –≥–ª–∞–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ ‚Äî –∏ —Ç–æ–ª—å–∫–æ –æ–Ω–∏\n–î–µ–Ω—å 3: –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ —Å–æ—Ü—Å–µ—Ç–µ–π –Ω–∞ 2 —á–∞—Å–∞\n–î–µ–Ω—å 4: –í–µ—á–µ—Ä–Ω–∏–π —Ä–µ–≤—å—é –¥–Ω—è\n–î–µ–Ω—å 5: –¶–∏—Ñ—Ä–æ–≤–æ–π –¥–µ—Ç–æ–∫—Å (2 —á–∞—Å–∞)\n–î–µ–Ω—å 6: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª–∏\n–î–µ–Ω—å 7: –û—Ç–¥—ã—Ö –±–µ–∑ –≤–∏–Ω—ã\n\n‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: +2 —á–∞—Å–∞ –≤ –¥–µ–Ω—å",
    "@FinAI_Guide": "–®–∞–±–ª–æ–Ω –±—é–¥–∂–µ—Ç–∞ + –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–æ–Ω–Ω—ã–π –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä (Google Sheets)\n\n- –î–æ—Ö–æ–¥—ã / –†–∞—Å—Ö–æ–¥—ã / –ù–∞–∫–æ–ø–ª–µ–Ω–∏—è ‚Äî –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏\n- –ü—Ä–∞–≤–∏–ª–æ 50/30/20 ‚Äî –≤—Å—Ç—Ä–æ–µ–Ω–Ω–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è\n- –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏: ETF, –∫—Ä–∏–ø—Ç–∞, –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Ä–æ—Å—Ç–∞\n- –î–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ ‚Äî –∫–æ–ø–∏—Ä—É–π –∏ –ø–æ–ª—å–∑—É–π—Å—è\n\nüîó –°—Å—ã–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ",
    "@HealthAI_Tips": "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –æ—Ç –ò–ò (PDF)\n\n- –ó–∞–≤—Ç—Ä–∞–∫: –æ–≤—Å—è–Ω–∫–∞ + —è–≥–æ–¥—ã + –æ—Ä–µ—Ö–∏\n- –û–±–µ–¥: –±–µ–ª–æ–∫ + –æ–≤–æ—â–∏ + —Å–ª–æ–∂–Ω—ã–µ —É–≥–ª–µ–≤–æ–¥—ã\n- –£–∂–∏–Ω: –ª—ë–≥–∫–∏–π, –∑–∞ 3 —á–∞—Å–∞ –¥–æ —Å–Ω–∞\n- –ü–µ—Ä–µ–∫—É—Å—ã: –π–æ–≥—É—Ä—Ç, —Ñ—Ä—É–∫—Ç—ã, –æ—Ä–µ—Ö–∏\n- –í–æ–¥–∞: 30 –º–ª –Ω–∞ 1 –∫–≥ –≤–µ—Å–∞\n- –ë–µ–∑ –¥–∏–µ—Ç, –±–µ–∑ –≥–æ–ª–æ–¥–∞ ‚Äî —Ç–æ–ª—å–∫–æ –±–∞–ª–∞–Ω—Å",
    "@GrowthAI_Hacks": "10 —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è –≤–∏—Ä—É—Å–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤\n\n1. ¬´–°–æ—Ö—Ä–∞–Ω–∏ ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è¬ª\n2. ¬´3 –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—Å–µ –¥–µ–ª–∞—é—Ç¬ª\n3. ¬´–ö–∞–∫ —è –∑–∞—Ä–∞–±–æ—Ç–∞–ª X –∑–∞ Y –¥–Ω–µ–π¬ª\n4. ¬´–ß–µ–∫-–ª–∏—Å—Ç: —Å–¥–µ–ª–∞–π –∑–∞ 5 –º–∏–Ω—É—Ç¬ª\n5. ¬´–¢–û–ü-5 –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤¬ª\n6. ¬´–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –¥–æ/–ø–æ—Å–ª–µ¬ª\n7. ¬´–°–µ–∫—Ä–µ—Ç, –æ –∫–æ—Ç–æ—Ä–æ–º –º–æ–ª—á–∞—Ç¬ª\n8. ¬´–í–æ–ø—Ä–æ—Å + –æ—Ç–≤–µ—Ç¬ª\n9. ¬´–õ–∏—á–Ω—ã–π –æ–ø—ã—Ç¬ª\n10. ¬´–®–∞–≥ –∑–∞ —à–∞–≥–æ–º¬ª\n\nüìù –ö–æ–ø–∏—Ä—É–π ‚Üí –≤—Å—Ç–∞–≤–ª—è–π ‚Üí –ø—É–±–ª–∏–∫—É–π",
    "@LearnAI_Fast": "–ö—É—Ä—Å: –û—Å–≤–æ–π Notion –∑–∞ 1 –¥–µ–Ω—å\n\n–£—Ä–æ–∫ 1: –ë–∞–∑—ã –∏ —Å–≤—è–∑–∏\n–£—Ä–æ–∫ 2: –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∑–∞–¥–∞—á\n–£—Ä–æ–∫ 3: –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –∫–∞–ª–µ–Ω–¥–∞—Ä—ë–º\n–£—Ä–æ–∫ 4: –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n–£—Ä–æ–∫ 5: –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Telegram\n\nüìÅ –í—Å–µ —à–∞–±–ª–æ–Ω—ã ‚Äî –≤ –æ–¥–Ω–æ–º Notion-–ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–µ (—Å—Å—ã–ª–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ)",
    "@MindAI_Daily": "30 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏\n\n1. –î—ã—Ö–∞–Ω–∏–µ 4-7-8\n2. –ó–∞–∑–µ–º–ª–µ–Ω–∏–µ (5-4-3-2-1)\n3. –ñ—É—Ä–Ω–∞–ª –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç–∏\n4. –¢–µ–ª–µ—Å–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ\n5. –ú–µ–¥–∏—Ç–∞—Ü–∏—è ¬´–¢–µ–ª–æ –∫–∞–∫ –æ–±–ª–∞–∫–æ¬ª\n... –¥–æ 30\n\nüßò –î–µ–ª–∞–π –ø–æ 1 –≤ –¥–µ–Ω—å ‚Äî —Ç—Ä–µ–≤–æ–≥–∞ —Å–Ω–∏–∂–∞–µ—Ç—Å—è –∑–∞ 2 –Ω–µ–¥–µ–ª–∏",
    "@TechAI_Now": "–¢–û–ü-10 –≥–∞–¥–∂–µ—Ç–æ–≤ 2025 —Å —Å—Å—ã–ª–∫–∞–º–∏\n\n1. iPhone 16 Pro ‚Äî –ò–ò-–∫–∞–º–µ—Ä–∞\n2. Samsung Galaxy Ring ‚Äî –∑–¥–æ—Ä–æ–≤—å–µ\n3. Apple Vision Pro ‚Äî –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å\n4. DJI Avata 2 ‚Äî –¥—Ä–æ–Ω—ã\n5. Framework Laptop ‚Äî —Ä–µ–º–æ–Ω—Ç–æ–ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å\n6. Sony WH-1000XM6 ‚Äî —à—É–º–æ–¥–∞–≤\n7. Kindle Scribe ‚Äî —á—Ç–µ–Ω–∏–µ + –∑–∞–º–µ—Ç–∫–∏\n8. DJI Mic 2 ‚Äî –∑–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞\n9. Anker 737 Charger ‚Äî –∑–∞—Ä—è–¥–∫–∞ –Ω–∞ –≤—Å—ë\n10. Logitech MX Master 3S ‚Äî –º—ã—à—å –¥–ª—è —Ä–∞–±–æ—Ç—ã\n\nüîó –í—Å–µ —Å—Å—ã–ª–∫–∏ ‚Äî –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ, —Å –∫—ç—à–±—ç–∫–æ–º"
}

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –ø—Ä–∏ /guide
user_channels = {}

logging.basicConfig(level=logging.INFO)

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ù–∞–ø–∏—à–∏ /guide, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª.")

async def guide(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    chat = update.effective_chat

    referrer = None
    if chat.type == "private":
        if update.message.forward_from_chat and update.message.forward_from_chat.type == "channel":
            username = update.message.forward_from_chat.username
            if username:
                referrer = f"@{username}"

    if not referrer:
        keyboard = [[InlineKeyboardButton(ch, callback_data=f"sel_{ch}")] for ch in DIGITAL_PRODUCTS.keys()]
        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª:", reply_markup=InlineKeyboardMarkup(keyboard))
        return

    user_channels[user_id] = referrer
    await send_invoice(update, context, referrer)

async def select_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    channel = query.data.replace("sel_", "")
    user_channels[query.from_user.id] = channel
    await send_invoice(query, context, channel)

async def send_invoice(update_or_query, context, channel):
    title = f"–¶–∏—Ñ—Ä–æ–≤–æ–π guide: {channel}"
    description = "–ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!"
    payload = f"product_{channel}"
    prices = [LabeledPrice("Guide", 49)]

    if isinstance(update_or_query, Update):
        await update_or_query.message.reply_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token="",  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø—É—Å—Ç–æ –¥–ª—è Stars
            currency="XTR",
            prices=prices
        )
    else:
        await update_or_query.message.reply_invoice(
            title=title,
            description=description,
            payload=payload,
            provider_token="",
            currency="XTR",
            prices=prices
        )

async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.pre_checkout_query.answer(ok=True)

async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    payload = update.message.successful_payment.invoice_payload
    channel = payload.replace("product_", "")
    if channel in DIGITAL_PRODUCTS:
        await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ! –í–æ—Ç –≤–∞—à guide:\n\n{DIGITAL_PRODUCTS[channel]}")
    else:
        await update.message.reply_text("–û—à–∏–±–∫–∞: —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.")

# === –ê–í–¢–û–ü–£–ë–õ–ò–ö–ê–¶–ò–Ø 2 –†–ê–ó–ê –í –î–ï–ù–¨ ===
async def publish_to_channels(context: ContextTypes.DEFAULT_TYPE):
    job_data = context.job.data
    channel = job_data["channel"]
    topic = job_data["topic"]

    prompt = f"""
    –ù–∞–ø–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–π, –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ—Å—Ç –¥–ª—è Telegram-–∫–∞–Ω–∞–ª–∞ –Ω–∞ —Ç–µ–º—É: {topic}.
    –§–æ—Ä–º–∞—Ç: 
    - –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å —ç–º–æ–¥–∑–∏
    - 3‚Äì5 –ø—É–Ω–∫—Ç–æ–≤ —Å –∫–æ–Ω–∫—Ä–µ—Ç–∏–∫–æ–π
    - –í –∫–æ–Ω—Ü–µ: 
      "üëâ –°–æ—Ö—Ä–∞–Ω–∏ ‚Äî –ø—Ä–∏–≥–æ–¥–∏—Ç—Å—è.
       üëâ –ü–µ—Ä–µ—à–ª–∏ —Ç–æ–º—É, –∫—Ç–æ —Ö–æ—á–µ—Ç [–≤—ã–≥–æ–¥–∞].
       üëâ –•–æ—á–µ—à—å –ø–æ–ª–Ω—É—é –≤–µ—Ä—Å–∏—é? –ù–∞–ø–∏—à–∏ /guide"
    –°—Ç–∏–ª—å: –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π, —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π, –±–µ–∑ –≤–æ–¥—ã.
    """
    try:
        response = requests.post(
            "https://dashscope.aliyuncs.com/api/v1/services/aigc/text-generation/generation",
            headers={
                "Authorization": f"Bearer {DASHSCOPE_API_KEY}",
                "Content-Type": "application/json"
            },
            json={
                "model": MODEL,
                "input": {"messages": [{"role": "user", "content": prompt}]},
                "parameters": {"result_format": "message"}
            }
        )
        post = response.json()["output"]["choices"][0]["message"]["content"] if response.status_code == 200 else f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {topic}"
    except Exception as e:
        post = f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

    try:
        await context.bot.send_message(chat_id=channel, text=post)
        logging.info(f"‚úÖ –ü–æ—Å—Ç –≤ {channel}")
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ {channel}: {e}")

def setup_scheduled_posts(application: Application):
    tz = pytz.timezone("Europe/Moscow")
    topics_map = {
        "@AI_Automation_Hub": "–∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è –±–∏–∑–Ω–µ—Å–∞ —á–µ—Ä–µ–∑ –ò–ò",
        "@Earn_InTelegram": "–∑–∞—Ä–∞–±–æ—Ç–æ–∫ —á–µ—Ä–µ–∑ Telegram Stars",
        "@CryptoAI_Guide": "–∞–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ—Ä—ã–Ω–∫–∞",
        "@SmartHabits_AI": "–ø—Ä–∏–≤—ã—á–∫–∞ –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
        "@FinAI_Guide": "—Ñ–∏–Ω–∞–Ω—Å–æ–≤–∞—è –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å",
        "@HealthAI_Tips": "–∑–¥–æ—Ä–æ–≤—å–µ –∏ —ç–Ω–µ—Ä–≥–∏—è",
        "@GrowthAI_Hacks": "–º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–π –ª–∞–π—Ñ—Ö–∞–∫",
        "@LearnAI_Fast": "–æ–±—É—á–µ–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç",
        "@MindAI_Daily": "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞",
        "@TechAI_Now": "—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –±—É–¥—É—â–µ–≥–æ"
    }

    job_queue = application.job_queue
    for channel, topic in topics_map.items():
        data = {"channel": channel, "topic": topic}
        job_queue.run_daily(publish_to_channels, time(9, 0, tzinfo=tz), data=data)
        job_queue.run_daily(publish_to_channels, time(18, 0, tzinfo=tz), data=data)
        logging.info(f"üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –¥–ª—è {channel}")

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    if not BOT_TOKEN or BOT_TOKEN.strip() == "":
        raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω! –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ Variables –Ω–∞ Railway.")
    if not DASHSCOPE_API_KEY or DASHSCOPE_API_KEY.strip() == "":
        raise ValueError("‚ùå DASHSCOPE_API_KEY –Ω–µ –∑–∞–¥–∞–Ω!")

    app = Application.builder().token(BOT_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("guide", guide))
    app.add_handler(CallbackQueryHandler(select_channel, pattern=r"^sel_"))
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    setup_scheduled_posts(app)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: 2 –ø–æ—Å—Ç–∞/–¥–µ–Ω—å + Stars")
    app.run_polling()
